image: ridibooks/python:bootstrap-django-2018.11.12.2

stages:
- build
- manual-deploy
- deploy-development
- push-dev-image-to-docker-hub
- deploy-staging
- deploy-productiuon

pytest:
  stage: build
  services:
  - name: mariadb:10.1
    alias: account-mariadb
    command: ["mysqld", "--character-set-server=utf8", "--collation-server=utf8_unicode_ci"]
  variables:
    MYSQL_ROOT_PASSWORD: root
  script:
  - make global-python-package-install-development
  - make settings
  - make test

lint:
  stage: build
  script:
  - make global-python-package-install-development
  - make lint

deprecated-check:
  stage: build
  script:
  - make check-deprecated

build:
  image: ridibooks/python:gitlab-ci-2018.11.12.1
  stage: build
  only:
  - feature/docker_push

  before_script:
  - export TAG=${CI_COMMIT_SHA::8}

  script:
  - AWS_ACCESS_KEY_ID=$DEV_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$DEV_AWS_SECRET_ACCESS_KEY make ci-settings ns=development
  - ENVIRONMENT=development docker-compose -f ./docs/docker/compose/build.yml build

  - AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY make ci-settings ns=staging
  - ENVIRONMENT=staging docker-compose -f ./docs/docker/compose/build.yml build

  - AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY make ci-settings ns=production
  - ENVIRONMENT=production docker-compose -f ./docs/docker/compose/build.yml build


.deployment-template: &deployment
  image: ridibooks/python:gitlab-ci-2018.11.12.1
  before_script:
  - export TAG=${CI_COMMIT_SHA::8}

  script:
  - "`aws ecr get-login --no-include-email --region=$AWS_DEFAULT_REGION`"
  - sh docs/scripts/push.sh
  - sh docs/scripts/deploy.sh

development:
  <<: *deployment
  stage: deploy-development
  only:
  - feature/docker_push
  variables:
    ENVIRONMENT: "development"
    ECR_REPO_URL: $DEV_ACCOUNT_ECR
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY

push-dev-image-to-docker-hub:
  <<: *deployment
  stage: push-dev-image-to-docker-hub
  only:
  - feature/docker_push
  when: on_success
  allow_failure: true
  variables:
    DOCKER_DEV_ID: $DOCKER_DEV_ID
    DOCKER_DEV_PASSWORD: $DOCKER_DEV_PASSWORD
  script:
     - sh docs/scripts/push-dev-image-to-docker-hub.sh

staging:
  <<: *deployment
  stage: deploy-staging
  when: manual
  only:
  - master
  variables:
    ENVIRONMENT: "staging"
    ECR_REPO_URL: $PROD_ACCOUNT_ECR
    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY

production:
  <<: *deployment
  stage: deploy-productiuon
  when: manual
  only:
  - master
  variables:
    ENVIRONMENT: "production"
    ECR_REPO_URL: $PROD_ACCOUNT_ECR
    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY

development-manual:
  <<: *deployment
  stage: manual-deploy
  when: manual
  except:
  - feature/docker_push
  variables:
    ENVIRONMENT: "development"
    ECR_REPO_URL: $DEV_ACCOUNT_ECR
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY

  script:
  - make ci-settings ns=development
  - docker-compose -f ./docs/docker/compose/build.yml build

  - "`aws ecr get-login --no-include-email --region=$AWS_DEFAULT_REGION`"
  - sh docs/scripts/push.sh
  - sh docs/scripts/deploy.sh


staging-manual:
  <<: *deployment
  stage: manual-deploy
  when: manual
  except:
  - feature/docker_push
  variables:
    ENVIRONMENT: "staging"
    ECR_REPO_URL: $PROD_ACCOUNT_ECR
    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY

  script:
  - make ci-settings ns=staging
  - docker-compose -f ./docs/docker/compose/build.yml build

  - "`aws ecr get-login --no-include-email --region=$AWS_DEFAULT_REGION`"
  - sh docs/scripts/push.sh
  - sh docs/scripts/deploy.sh
