{
	"info": {
		"_postman_id": "1c1d7610-4964-48a2-9a18-f2f7340e6e7c",
		"name": "General",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "security",
			"item": [
				{
					"name": "cors",
					"item": [
						{
							"name": "Pre Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
											"    let helpers = {};",
											"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
											"    helpers.printResponseBody = () => {",
											"        // convert escpaped UTF-16 string to string",
											"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
											"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
											"        body = unescape(body);",
											"        // remove html tags",
											"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
											"            body = body.replace(/(<([^>]+)>)/gi);",
											"        }",
											"        console.log(body);",
											"    };",
											"    helpers.testStatus = (status) => {",
											"        tests[`Check status code === ${status}`] = responseCode.code === status;",
											"    };",
											"    return helpers;",
											"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
											"",
											"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
											"tests[\"Global variables initialized\"] = true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}",
									"host": [
										"{{host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200]cors test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92b8737d-f614-4ff7-a72b-40024961468e",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"const origin = postman.getResponseHeader(\"Access-Control-Allow-Origin\");",
											"",
											"tests[\"Access Control Allow Origin\"] = origin === pm.environment.get('host')",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Origin",
										"value": "{{host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}{{complete_path}}",
									"host": [
										"{{host}}{{complete_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200]cors block test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92b8737d-f614-4ff7-a72b-40024961468e",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"const origin = postman.getResponseHeader(\"Access-Control-Allow-Origin\");",
											"",
											"// access control allow origin 에 www.naver.com이 오면 안된다",
											"tests[\"Access Control Allow Origin\"] = origin !=pm.environment.get(\"dummy_redirect_uri\"); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Origin",
										"type": "text",
										"value": "{{dummy_redirect_uri}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}{{complete_path}}",
									"host": [
										"{{host}}{{complete_path}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f2b0e05-b414-4d04-9058-6d1578046172",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b822570-d5a3-4a4f-b949-c0faebee9689",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "iframe",
					"item": [
						{
							"name": "Pre Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
											"    let helpers = {};",
											"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
											"    helpers.printResponseBody = () => {",
											"        // convert escpaped UTF-16 string to string",
											"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
											"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
											"        body = unescape(body);",
											"        // remove html tags",
											"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
											"            body = body.replace(/(<([^>]+)>)/gi);",
											"        }",
											"        console.log(body);",
											"    };",
											"    helpers.testStatus = (status) => {",
											"        tests[`Check status code === ${status}`] = responseCode.code === status;",
											"    };",
											"    return helpers;",
											"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
											"",
											"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
											"tests[\"Global variables initialized\"] = true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}",
									"host": [
										"{{host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[200] iframe SAMEOPTION test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92b8737d-f614-4ff7-a72b-40024961468e",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"const frameOption = postman.getResponseHeader(\"X-Frame-Options\");",
											"tests[\"X Frame Option\"] =  frameOption==='SAMEORIGIN'"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Origin",
										"type": "text",
										"value": "{{host}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}{{complete_path}}",
									"host": [
										"{{host}}{{complete_path}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f2b0e05-b414-4d04-9058-6d1578046172",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b822570-d5a3-4a4f-b949-c0faebee9689",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}