{
	"info": {
		"_postman_id": "2fb672e8-5597-4aea-8813-231e7875d66c",
		"name": "Ridi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authorize",
			"item": [
				{
					"name": "Pre Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
									"    let helpers = {};",
									"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
									"    helpers.printResponseBody = () => {",
									"        // convert escpaped UTF-16 string to string",
									"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
									"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
									"        body = unescape(body);",
									"        // remove html tags",
									"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
									"            body = body.replace(/(<([^>]+)>)/gi);",
									"        }",
									"        console.log(body);",
									"    };",
									"    helpers.testStatus = (status) => {",
									"        tests[`Check status code === ${status}`] = responseCode.code === status;",
									"    };",
									"    return helpers;",
									"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
									"",
									"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
									"tests[\"Global variables initialized\"] = true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "# 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "783c968e-68e0-4cb1-a63b-cd3532484ccb",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(200);",
									"tests[\"Check login session\"] = postman.getResponseCookie('PHPSESSID').value;",
									"                        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[403] 잘못된 client 인증 - client_id 변조",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(403);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{callback_authorize_url}}?response_type=code&client_id={{not_in_house_client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
							"host": [
								"{{host}}{{callback_authorize_url}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{not_in_house_client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[302] Callback 인증요청 -> authroize 페이지로 redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1bd9e7d-6974-4161-8be8-a658c2688c6d",
								"type": "text/javascript",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(302);",
									"",
									"tests[\"Redirect to authorize page\"] = postman.getResponseHeader(\"Location\").has(\"/oauth2/authorize/?\");",
									"",
									"postman.setGlobalVariable(\"authorize_url\", postman.getResponseHeader(\"Location\"));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{callback_authorize_url}}?response_type=code&client_id={{client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
							"host": [
								"{{host}}{{callback_authorize_url}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[403] 잘못된 client redirect_uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1bd9e7d-6974-4161-8be8-a658c2688c6d",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(403);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{callback_authorize_url}}?response_type=code&client_id={{client_id}}&state={{state}}&redirect_uri={{dummy_redirect_uri}}",
							"host": [
								"{{host}}{{callback_authorize_url}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "redirect_uri",
									"value": "{{dummy_redirect_uri}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[302] authorize -> callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a4d8074-59ae-41f7-835b-aaad33efa39c",
								"exec": [
									"",
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(302);",
									"",
									"tests[\"Redirect to callback page\"] = postman.getResponseHeader(\"Location\").has(\"/callback/?\");",
									"const location= postman.getResponseHeader(\"Location\");",
									"postman.setGlobalVariable(\"callback_code_uri\", location);",
									"",
									"const wrongStateUrl = location.split('state')[0]+'state=dummystate' ;",
									"postman.setGlobalVariable(\"wrong_state_url\", wrongStateUrl);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{authorize_url}}",
							"host": [
								"{{host}}{{authorize_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[302] code 발급 완료 및 토큰 쿠키셋팅",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f778f6ba-5aab-4c0b-8c54-84c001c6ee38",
								"type": "text/javascript",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(302);",
									"",
									"tests[\"Redirect to redirect_uri\"] = postman.getResponseHeader(\"Location\").has(\"https://account.dev.ridi.io/ridi/callback/\");",
									"tests[\"Set access token to cookie\"] = postman.getResponseCookie(\"ridi-at\");",
									"tests[\"Set refresh token to cookie\"] = postman.getResponseCookie(\"ridi-rt\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{callback_code_uri}}",
							"host": [
								"{{callback_code_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[302] 잘못된 state 확인",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f778f6ba-5aab-4c0b-8c54-84c001c6ee38",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(302);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4dcf7428-88d4-4624-80e0-bca0de612bb0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{wrong_state_url}}",
							"host": [
								"{{wrong_state_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "token",
			"item": [
				{
					"name": "Pre Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
									"    let helpers = {};",
									"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
									"    helpers.printResponseBody = () => {",
									"        // convert escpaped UTF-16 string to string",
									"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
									"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
									"        body = unescape(body);",
									"        // remove html tags",
									"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
									"            body = body.replace(/(<([^>]+)>)/gi);",
									"        }",
									"        console.log(body);",
									"    };",
									"    helpers.testStatus = (status) => {",
									"        tests[`Check status code === ${status}`] = responseCode.code === status;",
									"    };",
									"    return helpers;",
									"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
									"",
									"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
									"tests[\"Global variables initialized\"] = true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[200] 토큰 정보 확인",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81c088e1-d6d5-4789-92c5-d2df860369e6",
								"type": "text/javascript",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(200);",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"expire_at exists\"] = jsonData.expires_at;",
									"tests[\"expire_in exists\"] = jsonData.expires_in;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{callback_token_url}}",
							"host": [
								"{{host}}{{callback_token_url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}