{
	"info": {
		"_postman_id": "322fcfd4-8db6-424c-a208-ec1e8f016212",
		"name": "Account",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "Pre Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
									"    let helpers = {};",
									"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
									"    helpers.printResponseBody = () => {",
									"        // convert escpaped UTF-16 string to string",
									"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
									"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
									"        body = unescape(body);",
									"        // remove html tags",
									"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
									"            body = body.replace(/(<([^>]+)>)/gi);",
									"        }",
									"        console.log(body);",
									"    };",
									"    helpers.testStatus = (status) => {",
									"        tests[`Check status code === ${status}`] = responseCode.code === status;",
									"    };",
									"    return helpers;",
									"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
									"",
									"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
									"tests[\"Global variables initialized\"] = true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[302] 로그인 안되있을 시, 로그인 뷰로 이동",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fa2ad89-e7b7-4e81-a057-0c68ae6d982c",
								"exec": [
									"",
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(302);",
									"",
									"tests[\"Redirect to login page\"] = postman.getResponseHeader(\"Location\").has('/account/login');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{account_login_path}}",
							"host": [
								"{{host}}{{account_login_path}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "# 로그인",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94a8bfbf-2cfb-4221-98bc-5b0170f83e48",
								"exec": [
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(200);",
									"tests[\"Check login session\"] = postman.getResponseCookie('PHPSESSID').value;",
									"                        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[302] 로그인 시, next로 이동",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fa2ad89-e7b7-4e81-a057-0c68ae6d982c",
								"exec": [
									"",
									"const h = eval(globals.loadHelpers);",
									"h.printResponseBody();",
									"h.testStatus(302);",
									"tests[\"Redirect to login page\"] = postman.getResponseHeader(\"Location\").has(pm.environment.get(\"ridi_complete_path\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{account_login_path}}?next={{ridi_complete_path}}",
							"host": [
								"{{host}}{{account_login_path}}"
							],
							"query": [
								{
									"key": "next",
									"value": "{{ridi_complete_path}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}