{
	"info": {
		"name": "Account",
		"_postman_id": "18e81068-a373-f42d-35d7-e526cfb4d0a3",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "전역 변수 초기화",
			"description": "",
			"item": [
				{
					"name": "Pre Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5ee1149-001b-4bfb-8e7a-2804fac61729",
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
									"    let helpers = {};",
									"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
									"    helpers.printResponseBody = () => {",
									"        // convert escpaped UTF-16 string to string",
									"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
									"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
									"        body = unescape(body);",
									"        // remove html tags",
									"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
									"            body = body.replace(/(<([^>]+)>)/gi);",
									"        }",
									"        console.log(body);",
									"    };",
									"    helpers.testStatus = (status) => {",
									"        tests[`Check status code === ${status}`] = responseCode.code === status;",
									"    };",
									"    return helpers;",
									"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
									"",
									"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
									"tests[\"Global variables initialized\"] = true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "authorization_code",
			"description": "",
			"item": [
				{
					"name": "/authorize",
					"description": "",
					"item": [
						{
							"name": "[302] 비로그인 인증요청 -> 로그인 페이지로 redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"tests[\"Redirect to login page\"] = postman.getResponseHeader(\"Location\").has('/accounts/login/?next=');",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&client_id={{client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "# 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94a8bfbf-2cfb-4221-98bc-5b0170f83e48",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"tests[\"Check login session\"] = postman.getResponseCookie('PHPSESSID').value;",
											"                        "
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://dev.ridi.io/account/action/login",
									"protocol": "https",
									"host": [
										"dev",
										"ridi",
										"io"
									],
									"path": [
										"account",
										"action",
										"login"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[400] 잘못된 client_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df4c91f2-f5f9-4eb6-b9f1-5b76552485fe",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(400);",
											"",
											"pm.test(\"invalid client_id error exists\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"invalid_request\");",
											"});",
											"",
											"pm.test(\"invalid client_id error_description exists\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid client_id parameter value\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&client_id=dummy_client_id&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "dummy_client_id",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[400] client_id 누락",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acf1416b-b6b8-479e-9bca-9f54d078e0fa",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(400);",
											"",
											"pm.test(\"missing client_id error exists\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"invalid_request\");",
											"});",
											"",
											"pm.test(\"missing client_id error_description exists\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing client_id parameter\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[400] 잘못된 redirect_uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5d0b852-35eb-4423-b481-f3ab8463fc31",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(400);",
											"",
											"pm.test(\"invalid redirect_uri error exists\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"invalid_request\");",
											"});",
											"",
											"pm.test(\"invalid redirect_uri error_description exists\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Mismatching redirect URI\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&state={{state}}&client_id={{client_id}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "https://dummy.com/receive/",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[302] 코드 발급 성공 & State 누락",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6a8e534-b78b-4d33-9dbe-9c16acce2ea1",
										"type": "text/javascript",
										"exec": [
											"function parseQuery(queryString) {",
											"    var query = {};",
											"    var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');",
											"    for (var i = 0; i < pairs.length; i++) {",
											"        var pair = pairs[i].split('=');",
											"        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');",
											"    }",
											"    return query;",
											"}",
											"",
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"const redirectTo = postman.getResponseHeader(\"Location\");",
											"const query = parseQuery(redirectTo.split('?')[1]);",
											"",
											"tests[\"Redirect to client receive url\"] = redirectTo.has(pm.environment.get('redirect_uri'));",
											"tests[\"Redirect url has code param\"] = query['code'];",
											"tests[\"Redirect url has state param\"] = !query.hasOwnProperty('state');",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&client_id={{client_id}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[302] code 발급",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "435335b3-2a5d-46e8-b998-6346fadc7555",
										"type": "text/javascript",
										"exec": [
											"function parseQuery(queryString) {",
											"    var query = {};",
											"    var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');",
											"    for (var i = 0; i < pairs.length; i++) {",
											"        var pair = pairs[i].split('=');",
											"        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');",
											"    }",
											"    return query;",
											"}",
											"",
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"const redirectTo = postman.getResponseHeader(\"Location\");",
											"const query = parseQuery(redirectTo.split('?')[1]);",
											"",
											"tests[\"Redirect to client receive url\"] = redirectTo.has(pm.environment.get('redirect_uri'));",
											"tests[\"Redirect url has code param\"] = query['code'];",
											"tests[\"Redirect url has state param\"] = query['state'] === pm.globals.get('state');",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&client_id={{client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/token",
					"description": "",
					"item": [
						{
							"name": "# 코드 준비",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0245f05b-5bb0-4bae-8520-56669463d534",
										"type": "text/javascript",
										"exec": [
											"function parseQuery(queryString) {",
											"    var query = {};",
											"    var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');",
											"    for (var i = 0; i < pairs.length; i++) {",
											"        var pair = pairs[i].split('=');",
											"        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');",
											"    }",
											"    return query;",
											"}",
											"",
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"const redirectTo = postman.getResponseHeader(\"Location\");",
											"const query = parseQuery(redirectTo.split('?')[1]);",
											"",
											"tests[\"Redirect to client receive url\"] = redirectTo.has(pm.environment.get('redirect_uri'));",
											"tests[\"Redirect url has code param\"] = query['code'];",
											"tests[\"Redirect url has state param\"] = query['state']===pm.globals.get('state');",
											"",
											"postman.setGlobalVariable('authorization_code', query['code']);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{host}}{{authorize_path}}?response_type=code&client_id={{client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{authorize_path}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[200] token 발급 성공",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a29a446-63bc-40d5-8491-30e6c5712d94",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"access_token exists\"] = jsonData.access_token;",
											"tests[\"refresh_token exists\"] = jsonData.refresh_token;",
											"tests[\"expires_in exists\"] = jsonData.expires_in === 3600;",
											"tests[\"token_type exists\"] = jsonData.token_type === 'Bearer';",
											"tests[\"scope exists\"] = jsonData.scope === 'all';",
											"",
											"postman.setGlobalVariable('access_token', jsonData.access_token);",
											"postman.setGlobalVariable('refresh_token', jsonData.refresh_token);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[401] 이미 사용한 authorization code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab66627d-9956-4237-bb5c-57918f149f4e",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(401);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"tests[\"error exists\"] = jsonData.error === 'invalid_grant';",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[401] 잘못된 client 인증 - client_id 변조",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15a814d8-41f2-4dd7-a407-a32f0184540f",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(401);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"tests[\"error exists\"] = jsonData.error === 'invalid_client';",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "dummy-client-id",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "dummy-client-secret",
											"description": "",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[401] 잘못된 client 인증 - client_secret 변조",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15a814d8-41f2-4dd7-a407-a32f0184540f",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(401);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"tests[\"error exists\"] = jsonData.error === 'invalid_client';",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "dummy-client-secret",
											"description": "",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "refresh_token",
			"description": "",
			"item": [
				{
					"name": "/token",
					"description": "",
					"item": [
						{
							"name": "[200] 토큰 발급 성공",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fa2ad89-e7b7-4e81-a057-0c68ae6d982c",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"access_token exists\"] = jsonData.access_token;",
											"tests[\"refresh_token exists\"] = jsonData.refresh_token;",
											"tests[\"expires_in exists\"] = jsonData.expires_in === 3600;",
											"tests[\"token_type exists\"] = jsonData.token_type === 'Bearer';",
											"tests[\"scope exists\"] = jsonData.scope === 'all';",
											"",
											"postman.setGlobalVariable('access_token', jsonData.access_token);",
											"postman.setGlobalVariable('refresh_token', jsonData.refresh_token);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[401] 잘못된 client 인증 - client_id 변조",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e6c4276-9202-4885-95c5-70a2bca67006",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(401);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"tests[\"error exists\"] = jsonData.error === 'invalid_client';",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "dummy-client-id",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[401] 잘못된 client 인증 - client_secret 변조",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e6c4276-9202-4885-95c5-70a2bca67006",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(401);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"tests[\"error exists\"] = jsonData.error === 'invalid_client';",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "dummy-client-secret",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[401] 잘못된 refresh token 사용",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdb3f6e6-b3c9-4b12-a1cb-4622a69fcb40",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(401);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"tests[\"error exists\"] = jsonData.error === 'invalid_grant';",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "dummy-refresh-token",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{token_path}}",
									"host": [
										"{{host}}{{token_path}}"
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "전역 변수 초기화",
			"description": null,
			"item": [
				{
					"name": "Pre Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
									"    let helpers = {};",
									"    let escapedUtf16Regex = /\\\\\\\\u([\\\\d\\\\w]{4})/gi;",
									"    helpers.printResponseBody = () => {",
									"        // convert escpaped UTF-16 string to string",
									"        // https://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode",
									"        let body = responseBody.replace(escapedUtf16Regex, (match, grp) => String.fromCharCode(parseInt(grp, 16)));",
									"        body = unescape(body);",
									"        // remove html tags",
									"        if (postman.getResponseHeader(\"Content-Type\") === 'text/html') {",
									"            body = body.replace(/(<([^>]+)>)/gi);",
									"        }",
									"        console.log(body);",
									"    };",
									"    helpers.testStatus = (status) => {",
									"        tests[`Check status code === ${status}`] = responseCode.code === status;",
									"    };",
									"    return helpers;",
									"} + '; loadHelpers();'); // when eval\\'d out of globals, execute it",
									"",
									"postman.setGlobalVariable('state', Math.floor(Math.random() * (999999 - 100000)) + 100000);",
									"tests[\"Global variables initialized\"] = true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "callback",
			"description": null,
			"item": [
				{
					"name": "authorization",
					"description": "",
					"item": [
						{
							"name": "# 로그인",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"tests[\"Check login session\"] = postman.getResponseCookie('PHPSESSID').value;",
											"                        "
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://ridibooks.com/account/action/login",
									"protocol": "https",
									"host": [
										"ridibooks",
										"com"
									],
									"path": [
										"account",
										"action",
										"login"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[403] 잘못된 client 인증 - client_id 변조",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(403);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "dummy-client-id",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}{{callback_authorize_url}}?response_type=code&client_id={{not_in_house_client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{callback_authorize_url}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{not_in_house_client_id}}",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[302] Callback 인증요청 -> authroize 페이지로 redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1bd9e7d-6974-4161-8be8-a658c2688c6d",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"tests[\"Redirect to authorize page\"] = postman.getResponseHeader(\"Location\").has(\"/oauth2/authorize/?\");",
											"",
											"postman.setGlobalVariable(\"authorize_url\", postman.getResponseHeader(\"Location\"));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}{{callback_authorize_url}}?response_type=code&client_id={{client_id}}&state={{state}}&redirect_uri={{redirect_uri}}",
									"host": [
										"{{host}}{{callback_authorize_url}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"equals": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"equals": true
										},
										{
											"key": "state",
											"value": "{{state}}",
											"equals": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"equals": true
										}
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[302] authorize -> callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a4d8074-59ae-41f7-835b-aaad33efa39c",
										"type": "text/javascript",
										"exec": [
											"",
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"tests[\"Redirect to callback page\"] = postman.getResponseHeader(\"Location\").has(\"/callback/?\");",
											"",
											"postman.setGlobalVariable(\"callback_code_uri\", postman.getResponseHeader(\"Location\"));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}{{authorize_url}}",
									"host": [
										"{{host}}{{authorize_url}}"
									]
								},
								"description": null
							},
							"response": []
						},
						{
							"name": "[302] code 발급 완료 및 토큰 쿠키셋팅",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f778f6ba-5aab-4c0b-8c54-84c001c6ee38",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(302);",
											"",
											"tests[\"Redirect to redirect_uri\"] = postman.getResponseHeader(\"Location\").has(\"https://account.dev.ridi.io/ridi/callback/\");",
											"tests[\"Set access token to cookie\"] = postman.getResponseCookie(\"ridi-at\");",
											"tests[\"Set refresh token to cookie\"] = postman.getResponseCookie(\"ridi-rt\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{callback_code_uri}}",
									"host": [
										"{{callback_code_uri}}"
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "token",
					"description": "",
					"item": [
						{
							"name": "[200] 토큰 정보 확인",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c088e1-d6d5-4789-92c5-d2df860369e6",
										"type": "text/javascript",
										"exec": [
											"const h = eval(globals.loadHelpers);",
											"h.printResponseBody();",
											"h.testStatus(200);",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"expire_at exists\"] = jsonData.expires_at;",
											"tests[\"expire_in exists\"] = jsonData.expires_in;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}{{callback_token_url}}",
									"host": [
										"{{host}}{{callback_token_url}}"
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}
